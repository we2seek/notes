::: INSERT :::
o - start new line



::: MOVE :::

w - forward one word (start word)
b - backward one word
e - next end of a word
ge - previous end of word
W, B, E, gE - the same but with whitespaces

$ - move to END line
^ - move to first non-blank character of the line
0 - (zero$) moving to very first character of the line

fz - move to the first occurence char z forward
Fz - move to the first occurence char z backward

% - matching parenthesis

G - end of file
nG - n lines down
gg - start file
H - HOME
M - MIDDLE
L - LAST 

CTRL-U - scroll DOWN half a screen
CTRL-D - scroll UP
CTRL-Y - scroll DOWN one line
CTRL-E - scroll UP one line
CTRL-F - scroll FORWARD one FULL screen
CTRL-B - scroll BACKWARD one FULL screen
CTRL-O - jump to older cursor position
CTRL-I - jump back to the newer
zz, zt, zb - move cursor at the middle top and bottom



::: SEARCH :::

/the - to find word "the" and "there"
/the\> - to find "the" in the end word only
/\<the - to find "the" in the begin of word
/\<the\> - to find "the" only
n - next occurence searched word
N - prev
* - command to find forward word under cursor.
# - command to find backward word under cursor

jkj
:set ignorecase (noignorecase)
:set hlsearch (nohlsearch) highlight all searched matches



::: MARKS :::

m[a-z] - set mark by single letter from a to z. Example: ma
`[a-z] - goto mark
:marks - list all the marks

    Special marks:
    '   The cursor position before doing a jump
    "   The cursor position when last editing the file
    [   Start of the last change
    ]   End of the last change



::: HELP :::

:vert help - open inner vim help in vertical window. You can also control whether the window splits on the top/left or on the right/bottom with "topleft" or "to" and "botright" or "bo". For example to open the help in the right window of a vertical split: 
    :vert bo help



::: SPLIT  :::

To open vim with window for a each file splited horisontally use option "-o". The "-O" argument is used to get vertically split windows:

vim -O one.txt two.txt three.txt
    
    ctrl-w left      - move cursor to widow on the left
    ctrl-w down      - move cursor to widow on the down
    ctrl-w up        - move cursor to widow on the up
    ctrl-w right     - move cursor to widow on the right
    
    ctrl-w h         - move cursor to widow on the left
    ctrl-w j         - move cursor to widow on the down
    ctrl-w k         - move cursor to widow on the up
    ctrl-w l         - move cursor to widow on the right
    
    ctrl-w t         - move to the TOP window
    ctrl-w b         - move to the BOTTOM window
    
    ctrl-w K         - move window to the far TOP
    ctrl-w H         - move window to the far LEFT
    ctrl-w J         - move window to the far BOTTOM
    ctrl-w L         - move window to the far RIGHT
    
    ctrl-w K         - horisontal split
    ctrl-w H         - vertical split
    ctrl-w x         - swap windows    
    ctrl-w r         - swap windows    

    ctrl-ww          - move cursor to another window (cycle)
    ctrl-w_          - maximize current window
    ctrl-w=          - make all equal size
    10 ctrl-w+       - increase window size by 10 lines
    ctrl-w >         - increase window width
    ctrl-w <         - reduce window width

    :close           - close the window
    :e filename      - edit another file
    :hide            - close current window
    :new             - open window on a new, empty file
    :only            - close all windows, except the current one
    :split filename  - split window and load another file
    :sview file      - same as split, but readonly
    :vnew            - open vertically split window in a new empty file
    :vsplit file     - vertical split
    :ls              - show current buffers
    :b 2             - open buffer #2 in this window 
    :vert sb N               - open left vertical split (by default) with buffer No. N
    :vert belowright sb N    - the same but right window with buffer



::: FILE EXPLORER :::
    
Open file explorer:
    
    :Explore :E     - at directory of current file
    :Sexplore :Se   - in split at directory of current file
    :Vexplore :Vex  - in vertical split at directory of current file

    :edit. :e.      - Opens file explorer at current working directory
    :split. :sp.    - in split at current working directory
    :vsplit. :vs.   - in vertical split at current working directory

Manipulating the filesystem

    %                   - create a new file
    d                   - create a new directory
    R                   - rename the file/directory under the cursor
    D                   - delete the file/directory under the cursor


::: INSERT :::
    10isome text<esc><esc>  - Insert "some text" 10 times


НАВИГАЦИЯ ПО ФАЙЛУ В VIM

i — перейти в режим ввода с текущей позиции
I — переместиться в начало строки и перейти в режим ввода
a — перейти в режим ввода после курсора
А — переместиться в конец строки и перейти в режим ввода
o — перейти в режим ввода с новой строки под курсором
O — перейти в режим ввода с новой строки над курсором
x — удалить символ под курсором
X — удалить символ влево (удалить символ перед курсором)
v — визуальный режим для выделения
y — скопировать выделение
yy — скопировать строку
y<число>y — копирование числа строк начиная с текущей в неименованный буфер
p — вставка содержимого неименнованного буфера под курсором
P — вставка содержимого неименнованного буфера перед курсором
dd — вырезать строку
d$ — вырезать до конца строки
d^ — вырезать до начала строки
d5d — вырезать 5 строк вниз (вместо 5 можно подставить любое значение)
d — используется совместно с командами перемещения. Удаляет символы с текущего положения курсора до положения после ввода команды перемещения.
dw — удаляет символы с текущего до конца слова
diw —удаляет слово под курсором
с — команда аналогичная d, но после удаление переходит в режим ввода. Очень удобная альтернатива команде R
R — перейти в режим ввода с забиванием текста
r — заменить один символ
J — слияние текущей строки со следующей
u — отмена последней команды
. — повтор последней команды
0 («ноль») — в начало текущей строки;
^ — в начало текущей строки (к первому непробельному символу);
$ — в конец текущей строки
w — на слово вправо
b — на слово влево
W — до пробела вправо
B — до пробела влево
} — абзац вниз
{ — абзац вверх
— на страницу (экран) вниз
— на страницу (экран) верх
gg — перейти в начало файла
G — перейти в конец файла
5G — перейти на конкретную строку (5)
/ — перейти к
? — то же самое, но искать назад
n — повторить поиск
N — повторить поиск назад
[[ — в начало функции
“ — к месту выполнения команды [[
:e new_file — создает новый пустой файл
:w new_file — создаст файл new_file и запишет в него содержимое текущего файла, а затем продолжит работу со старый файлом
:sav filename — Сохранить как…

ЗАМЕНА В VIM

:%s/старый/новый/g — Заменить все вхождения “старый” на “новый”
:%s/старый/новый/gw — Заменить все вхождения “старый” на “новый” с запросом подтверждения
:5,30s/старый/новый/g — Заменить все вхождения “старый” на “новый” между 5 и 30 строками
:10,$s/старый/новый/g — Заменить все вхождения “старый” на “новый” начиная с 10 строки и до конца файла
:%s/^/Приветствие/g — Добавить “Приветствие” в начало каждой строки
:%s/$/Завершение/g — Добавить “Завершение” в конец каждой строки
:%s/привет/пока/gi — Заменить “привет” на “пока” с учетом регистра
:%s/ *$//g — Убрать все пробелы
:g/погода/d — Удалить все строки, содержащие “погода”
:v/погода/d — Удалить все строки, не содержащие “погода”
:s/Дерево/Трава/ — Заменить первое вхождение “Дерево” на “Трава” в текущей строке
:s/Дерево/Трава/g — Заменить все вхождения “Дерево” на “Трава” в текущей строке
:%s/\r//g — Убрать символ возврата каретки
:%s#>[^<]\+>##g — Очистить текст от HTML-тегов
:%s/^\(.*\)\n\1$/\1/ — Удалить строки, повторяющиеся дважды
:g/^$/d — Удалить все пустые строки
Ctrl+a — Увеличить число под курсором на единицу
Ctrl+x — Уменьшить число под курсором на единицу
ggVGg? — Преобразовать текст в Rot13
:%s#redis\.big\..*=\zs.*$##gc — В строках "redis.big.blah_blah=some_text" удалить все после знака равно '='


ПОИСК В VIM

/door — Искать слово “door” сверху вниз
?door — Искать слово “door” снизу вверх
/\cdoor — Искать слово “door” без учета регистра
/jo[ha]n> — Искать “john” или “joan”
/\< the — Искать слова, начинающееся на “the” /the\> — Искать слова, заканчивающиеся на “the”
/\< door\> — Искать “door”
/\< …. \> — Искать слова из четырех символов
/fred\|joe — Искать “fred” или “joe”
/\<\d\d\d\d\> — Искать 4 цифры подряд
/^\n\{2} — Искать 2 пустые строки
:bufdo /searchstr/ — Искать во всех открытых файлах


РЕГИСТР В VIM

Vu — Перевести строку в нижний регистр
VU — Перевести строку в верхний регистр
g~~ — Инвертировать регистр
vEU — Перевести слово под курсором в верхний регистр
vE~ — Инвертировать регистр слова
ggguG — Перевести весь текст в нижний регистр
:setignorecase — Регистронезависимый поиск
:set smartcase — Игнорировать регистр при поиске, если в искомом выражении нет символов верхнего регистра
:%s/\<./\u&/g — Перевести первую букву каждого слова в верхний регистр
:%s/\<./\l&/g — Перевести первую букву каждого слова в нижний регистр
:%s/.*/\u& — Перевести первую букву первого слова в каждой строке в верхний регистр
:%s/.*/\l& — Перевести первую букву первого слова в каждой строке в нижний регистр


SYSTEM CLIPBOARD

*dd or 1G"*yG - copy things into the * register and "*p to paste text from it. 
:%y * will accomplish the same goal as gg"*yG


DELETE EVERY SECOND ROW

aaa    aaa
vvv => bbb
bbb    ccc
vvv
ccc
vvv

Command: :g/^/+d
Description: An elegant (and efficient) way to accomplish the task is to issue the :+delete command removing the line next to the current one, on every line using the :global command.


JOIN LINES

Command: J



::: INSERT TEXT AT BEGINNING OF MULTI-LINE SELECTION :::

    1. Use CTRL-v to enter visual block mode
    2. Move Up/Down to select the columns if text in lines you want to comment
    3. Hit SHIFT-i and type text you want to insert
    4. Then hit ESC, wait 1 second and the inserted text will appear in every line.



::: SHOW WHITESPACES, TABS ETC :::
    
    Enable
    :set list
    
    Disable
    :set nolist

    :help listchars

    Example
    :set listchars=eol:¶,tab:>-,trail:·,extends:>,precedes:<,nbsp:˽
    
    Note: To input unicode char type CTRL+SHIFT+u+XXXX
    Example: ¶ = CTRL+SHIFT+u+00b6



::: COMENT / UNCOMMENT LINES :::
    Comment (Insert symbol at the first pos)
    1) Goto 1 character at the line
    2) ctrl-v (block selection)
    3) select block (arrow down)
    4) shift-I-#-Esc and wait 1 sec



::: CHANGE TEXT BETWEEN HTML TAGS 

    cit — replace between tags
    ci[, ci{, or ci( — replace between mathed square or curly brackets, or parentheses.
    ci], ci}, or ci) — the same but w closing character


