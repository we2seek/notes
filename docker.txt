Course link:
https://www.udemy.com/course/docker-for-java-developers/learn/lecture/6659194#overview


# Dockerfile example
FROM node                       (base image)
WORKDIR /app                    (where to copy all app files)
COPY package.json /app          
RUN npm install                 (RUN executes only once on build)
                                (so placing this before COPY trick)
                                (allows to use cached content by docker)
                                (and do not copying node_modules every build)
                                (if no changes in package.json happened)

COPY . .                        (copy project files to image WORKDIR)
ENV PORT 4200                   (pass environment variable to image)
EXPOSE $PORT                    (expose port 4200)
CMD ["node", "app.js"]          (unlike RUN this command runs every time when container starts)


# create image
docker build .
docker build -t <IMAGE NAME> . (create with name)
docker build -t <IMAGE NAME>:<TAG> . (create with name and tag)



# list images
docker images
docker image ls



# remove images
docker rmi <IMAGE ID> [<ANOTHER IMAGE ID>]        (remove a docker image)
docker rmi <IMAGE NAME>                           (remove a docker image)
docker rmi $(docker images -q -f dangling=true)   (remove untagged [dangling] images)
docker rmi $(docker images -q)                    (remove all images)
docker image prune                                (remove unused images) 


# rename image
docker tag <OLD NAME> <NEW NAME>



# ignore files/folders on image build
touch .dockerignore

.dockerignore:
.node_modules
.git
.idea
Dockerfile



# show image details
docker image inspect <IMAGE ID/NAME>

# run image as a new container
docker run <REPOSITORY>
docker run <IMAGE ID>
docker run --help (more info)
docker run -it node (interactive mode)
docker run -p 80:3000 <IMAGE ID> (OUTER_PORT:CONTAINER_PORT)
docker run -d -p 80:3000 <IMAGE ID> (detached)
docker run -d -p 80:3000 --name <CONTAINER NAME> <IMAGE ID> (run with name)
docker run -d -p 80:3000 --name <CONTAINER NAME> --rm <IMAGE ID> (auto rm container atfer stop)
docker run -d -p 80:8800 --name <CONTAINER NAME> --rm -e PORT 8800 <IMAGE ID> (pass env variable)
docker run -d -p 80:8800 --name <CONTAINER NAME> --rm --env-file ./config/.env <IMAGE ID> (pass env file)

# run image as a new container w/ external storage for mongodb
docker run -p 27017:27017 -d --name mng -v /home/well/dockerdata/mongo:/data/db mongo 

# run rabbitmq
docker run -d --hostname guru-rabbit --name some-rabbit -p 8080:15672 -p 5671:5671 -p 5672:5672 rabbitmq:3-management --rm


# run container
docker start <CONTAINER ID/NAME> (start existing container in detached mode)



# stop container
docker stop <CONTAINER ID/NAME>



# list containers
docker ps
docker ps -a (all containers)
docker ps --help (more info)



# remove container
docker rm <CONTAINER ID> [<ANOTHER CONTAINER ID>]
docker kill $(docker ps -q)    (kill all running containers)
docker rm $(docker ps -a -q)   (delete all stopped docker containers)
docker container prune         (remove all stopped containers)


# attach to running container
docker attach <CONTAINER ID/NAME>



# show container logs
docker logs <CONTAINER ID/NAME>



# convinient way - Makefile
touch Makefile:
run:
   docker run -d -p 80:8800 --name <CONTAINER NAME> --rm --env-file ./config/.env <IMAGE ID>
stop:
   docker stop <CONTAINER ID/NAME>

to use shortcuts:
   make run
   make stop


# example: run container with external storage
   docker run -p 27017:27017 --name some-mongo -v /tmp/docker/mongo/:/data/db -d mongo
   docker run -p 3306:3306 --name some-mysql -v /tmp/docker/mysql/:/var/lib/mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -d mysql



# cleaning up volumes
# Once a volume is no longed associated with a container, it is considered "dangling"

# remove all dangling volumes
# NOTE: Does not remove files from host system in shared volumes
   docker volume rm $(docker volume ls -f -q dangling=true)




# run CentOS interactively
   docker run -d centos tail -f /dev/null
   docker exec -it <CONTAINER_NAME> bash 



# Java on Alpine
FROM alpine:3.14

RUN  apk update \
  && apk upgrade \
  && apk add ca-certificates \
  && update-ca-certificates \
  && apk add --update coreutils && rm -rf /var/cache/apk/*   \ 
  && apk add --update openjdk11 tzdata curl unzip bash \
  && apk add --no-cache nss \
  && rm -rf /var/cache/apk/*


