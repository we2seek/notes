
----------------------------------------
   Getting git to work with a proxy server
----------------------------------------

Command to use :

git config --global http.proxy http://proxyuser:proxypwd@proxy.server.com:8080
git config --global https.proxy https://proxyuser:proxypwd@proxy.server.com:8080

    change proxyuser to your proxy user
    change proxypwd to your proxy password
    change proxy.server.com to the URL of your proxy server
    change 8080 to the proxy port configured on your proxy server

If you decide at any time to reset this proxy and work without (no proxy):

Commands to use:

git config --global --unset http.proxy
git config --global --unset https.proxy

Finally, to check the currently set proxy;

git config --global --get http.proxy
git config --global --get https.proxy

----------------------------------------
   Ignore file modification in local git repo
----------------------------------------
git update-index --assume-unchanged FILENAME    ON
git update-index --no-assume-unchanged FILENAME OFF

----------------------------------------
   Change commiter username etc
----------------------------------------

git config user.name                - show current name for a specific repository
git config user.email               - show current email for a specific repository

git config user.name "Vitaliy Timchenko"    - set name for a specific repository
git config user.email "example@email.com"   - set email for a specific repository

git config --global user.name           - The same but for all the repos

----------------------------------------
   Update from alien project
----------------------------------------

git remote add upstream https://github.com/RoverWire/virtualhost.git
git fetch upstream

git pull upstream master
git push origin master



----------------------------------------
   Change remote server (HTTPS to SSH)
----------------------------------------

git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git


----------------------------------------
   View file diff before commit
----------------------------------------

To see what you haven't git added yet:
   git diff -- myfile.txt

To see already-added changes
   git diff --cached myfile.txt

All the changes (staged or not staged) will be shown.
   git diff HEAD file



Delete remote branch
   git push origin --delete <branchName>



Undo last commit 
   git reset --soft HEAD^


Revert uncommitted changes to file
   git checkout filename


----------------------------------------
   Switch between different github 
   accouns with the same workstation
----------------------------------------

1. Create a new SSH key
   BE CAREFUL! Do not overwrite existing key! 
   When prompted, save the file with another name, 
   such as "~/.ssh/id_rsa_NEW_ACCOUNT_NAME"
      
   ssh-keygen -t rsa C "your-email-address"

2. Attach the new key from "~/.ssh/id_rsa_NEW_ACCOUNT_NAME.pub" on the github.com

3. Next, because we saved our key with a unique name, we need to tell SSH about it. 
   
   ssh-add ~/.ssh/id_rsa_NEW_ACCOUNT_NAME
   
   If successful, you'll see a response of "Identity Added."

4. Create a config file for SSH

   vim ~/.ssh/config
   
   ------
   # Default github
   Host github.com
      HostName github.com
      User git
      IdentityFile ~/.ssh/id_rsa

   # New user's account
   Host github-NEW_ACCOUNT_NAME
      HostName github.com
      User git
      IdentityFile ~/.ssh/id_rsa_NEW_ACCOUNT_NAME
   ------


5. Try it on

   git init
   git config user.name "Onotolle"
   git config user.email "your-email"

   git commit -am "initial commit"

   git remote add origin git@github-NEW_ACCOUNT_NAME:Account/test.git
   git push origin master



----------------------------------------
   Change last commit
----------------------------------------
https://githowto.com/ru/amending_commits



----------------------------------------
   Rename branch
----------------------------------------

If you want to rename a branch while pointed to any branch, do:
   git branch -m <oldname> <newname>

If you want to rename the current branch, you can do:
   git branch -m <newname>

A way to remember this, is -m is for "move" (or mv), which is how you rename files.
